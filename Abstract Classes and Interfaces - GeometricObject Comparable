public abstract class GeometricObject implements Comparable {

	private String color;
	private boolean filled;
	private java.util.Date dateCreated;
	

	protected GeometricObject() {
		dateCreated = new java.util.Date();
	}
	
	public String getColor() {
		return color;
	}
	
	public void setColor(String color) {
		this.color = color;
	}
	
	public boolean isFilled() {
		return filled;
	}
	
	public void setFilled(boolean filled) {
		this.filled = filled;
	}
	
	public java.util.Date getDateCreated() {
		return dateCreated;
	}
	
	@Override
	public String toString() {
		return "Created on " + dateCreated + "\nColor: " + color + " and filled " + filled;
	}
	
	public static Object max(Object o1, Object o2) {
		if (((Comparable)o1).compareTo(o2) > 0)
			return "object1";
		else
			return "object2";
	}
	
	public abstract double getArea();
	
	public abstract double getPerimeter();
	}





public class Circle extends GeometricObject {

	private double radius;
	
	public Circle() {
	}
	
	public Circle(double radius) {
		this.radius = radius;
	}
	
	public double getRadius() {
		return radius;
	}
	
	public void setRadius(double radius) {
		this.radius = radius;
	}
	
	public double getArea() {
		return radius * radius * Math.PI;
	}
	
	public double getDiameter() {
		return 2 * radius;
	}
	
	public double getPerimeter() {
		return 2 * radius * Math.PI;
	}
	
	public void printCircle() {
		System.out.println("The circle is created " + getDateCreated() + " and the radius is " + radius);
	}

	@Override
	public int compareTo(Object o) {
		if (getArea() < ((Circle)o).getArea()) 
			return 1;
		else if (getArea() < ((Circle)o).getArea())
			return -1;
		else
			return 0;
	}
}





public class Rectangle extends GeometricObject {

	private double width, heigth;
	
	public Rectangle() {
	}
	
	public Rectangle(double width, double heigth) {
		this.width = width;
		this.heigth = heigth;
	}
	
	public double getWidth() {
		return width;
	}
	
	public void setWidth(double width) {
		this.width = width;
	}
	
	public double getHeigth() {
		return heigth;
	}
	
	public void setHeigth(double heigth) {
		this.heigth = heigth;
	}
	
	public double getArea() {
		return width * heigth;
	}
	
	public double getPerimeter() {
		return 2 * (width + heigth);
	}

	@Override
	public int compareTo(Object o) {
		if (getArea() < ((Rectangle)o).getArea()) 
			return 1;
		else if (getArea() < ((Rectangle)o).getArea())
			return -1;
		else
			return 0;
	}
}





public class TestGeometricObject {

	public static void main(String[] args) {
		
		GeometricObject geo1 = new Circle(20);
		GeometricObject geo2 = new Circle(15);
		GeometricObject geo3 = new Rectangle(6, 5);
		GeometricObject geo4 = new Rectangle(9, 4);
		
		System.out.println("Max Circle: " + GeometricObject.max(geo1.getArea(), geo2.getArea()));
		System.out.print("Max Rectangle: " + GeometricObject.max(geo3.getArea(), geo4.getArea()));
	}
}
